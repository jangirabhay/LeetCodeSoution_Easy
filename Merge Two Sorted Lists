/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {
        if(list1 == null && list2 == null){
            return list1;
        }
         ListNode temp1 = list1;
        ArrayList<Integer> arr1 = new ArrayList<>();
        while (temp1 != null) {
            arr1.add(temp1.val);
            temp1 = temp1.next;
        }
        ListNode temp2 = list2;
        ArrayList<Integer> arr2 = new ArrayList<>();
        while (temp2 != null) {
            arr2.add(temp2.val);
            temp2 = temp2.next;
        }

        ArrayList<Integer> merge = new ArrayList<>();
        mergelist(merge, arr1, arr2);
        ListNode dummy = new ListNode(0);
        ListNode current = dummy;
        for (Integer integer : merge) {
            current.next = new ListNode(integer);
            current = current.next;
        }
        return dummy.next;

    }
    public void mergelist(ArrayList<Integer> merge, ArrayList<Integer> left, ArrayList<Integer> right) {
        int i = 0;
        int j = 0;
        while (i < left.size() && j < right.size()) {
            if(left.get(i) < right.get(j)){
                merge.add(left.get(i));
                i++;
            }
            else {
                merge.add(right.get(j));
                j++;
            }
        }

        while(i< left.size()){
            merge.add(left.get(i));
                i++;
        }
        while(j< right.size()){
            merge.add(right.get(j));
                j++;
        }

    }
}
